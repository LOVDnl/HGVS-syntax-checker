#!/bin/php
<?php
// Created  2024-12-30
// Modified 2024-12-30

if (!function_exists('yaml_parse_file')) {
    die("This script requires the php-yaml extension; please install it first and then try again.\n\n");
}

if (empty($_SERVER['argc']) || $_SERVER['argc'] != 2) {
    if (empty($_SERVER['argv'])) {
        $_SERVER['argv'] = array(
            basename(__FILE__),
        );
    }
    die('Usage: ' . $_SERVER['argv'][0] . " <path_to_HGVS_nomenclature_website>\n\n");
}

// Check the remote to make sure we have the correct repository.
$sPath = $_SERVER['argv'][1];
if (!is_dir($sPath) || !is_readable($sPath)) {
    die("Could not read this directory.\n\n");
}

chdir($sPath);
exec('git remote -v 2>/dev/null', $aGitRemotes);
$bHGVS = false;
foreach ($aGitRemotes as $sLine) {
    list(,$sURL,) = preg_split('/\s+/', $sLine);
    if ($sURL == 'git@github.com:HGVSnomenclature/hgvs-nomenclature.git') {
        $bHGVS = true;
        break;
    }
}

if (!$bHGVS) {
    die("The given directory is not the repository of the HGVS nomenclature website.\n\n");
}

$sGitRoot = exec("git rev-parse --show-toplevel 2>/dev/null");
if (!$sGitRoot) {
    die("Could not locate the repository's root directory.\n\n");
}

chdir($sGitRoot . '/docs');

$aExamples = array();
$aVariants = array();

// Collect data from the syntax.yaml.
$aSyntax = yaml_parse_file('./syntax.yaml');
unset($aSyntax['element_descriptions']);
foreach ($aSyntax as $sMolecule => $aTypes) {
    foreach ($aTypes as $sType => $aType) {
        foreach ($aType['forms'] as $aForm) {
            if (isset($aForm['examples'])) {
                foreach ($aForm['examples'] as $sExample) {
                    $aExamples[$sMolecule . '.' . $sType][] = $sExample;
                }
            }
        }
    }
}

// Next, parse all the Markdown docs. We'll find variants in the recommendations,
//  background, and community consultation pages.
$iVariantsFound = 0;
exec('find . -iname \*md | sort', $aFiles);
foreach ($aFiles as $sFile) {
    echo "Parsing $sFile";
    // Variant descriptions aren't split over several lines, so parse each line separately.
    $aFile = file($sFile, FILE_IGNORE_NEW_LINES);
    foreach ($aFile as $sLine) {
        // If this page has examples, include them.
        if (preg_match('/docs\/syntax.yaml (.+)$/', $sLine, $aMatches)) {
            if (isset($aExamples[$aMatches[1]])) {
                $aVariants = array_merge(
                    $aVariants,
                    array_combine(
                        $aExamples[$aMatches[1]],
                        array_fill(0, count($aExamples[$aMatches[1]]), [$sFile, 'valid'])
                    )
                );
                unset($aExamples[$aMatches[1]]);
            }
        }

        // First find incorrect examples; they are labeled as such.
        if (preg_match_all('/<code class="invalid">([^<]+)<\/code>/', $sLine, $aMatches)) {
            for ($i = 0; isset($aMatches[1][$i]); $i++) {
                $aVariants[$aMatches[1][$i]] = [$sFile, 'invalid'];
                $iVariantsFound++;
                $sLine = str_replace($aMatches[0][$i], str_repeat('X', strlen($aMatches[0][$i])), $sLine);
            }
        }
    }

    echo " [$iVariantsFound]\n";
}
